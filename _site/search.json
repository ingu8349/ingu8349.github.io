[
  
    {
      "title"    : "HTML 그 두번째",
      "title-lower"    : "html 그 두번째",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "HTMLinline-block",
      "tags"     : "",
      "url"      : "/html/inline-block/2023/02/08/HTML2.html",
      "date"     : "2023-02-08 18:35:03 +0900",
      "content"     : "HTML inline-block, block 에 대해저번 시간에 오랜만에 float을 썼는데 현직에서 보니 float을 쓴 기억이 한 번도 없다.이번엔 inline-block을 통해 가로로 세울 수 있는 방법을 되짚어본다.사실 flex를 보통 써서 쉽게 하고있는데, 리마인드 정도로 글을 남긴다.inline-block은 자기 크기만큼 자리를 차지한다. ..."
    } ,
  
    {
      "title"    : "JAVASCRIPT의 시작",
      "title-lower"    : "javascript의 시작",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "Javascript",
      "tags"     : "",
      "url"      : "/javascript/2023/02/05/javascript.html",
      "date"     : "2023-02-05 18:35:03 +0900",
      "content"     : "Javascript의 시작html의 기초는 있으니 바로 시작,&amp;lt;h1&amp;gt; //태그가 있다고 가정해봤을 때&amp;lt;h1 id=&quot;hello&quot;&amp;gt;안녕하세요&amp;lt;h1&amp;gt;//의 innerHTML을 바꾸는 방법은 script안에 document.getElementById(&quot;hel..."
    } ,
  
    {
      "title"    : "HTTP Protocol",
      "title-lower"    : "http protocol",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "HTTPHTTPProtocolHTTP프로토콜",
      "tags"     : "",
      "url"      : "/http/httpprotocol/http%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C/2023/02/04/http.html",
      "date"     : "2023-02-04 18:35:03 +0900",
      "content"     : "HTTP 프로토콜에 대해 알아보다.흔히 인터넷창에 쓰는 url을 통해 많이 봐왔던 http 관련 정보들을 정리해보려한다.캡틴판교님의 블로그 게시글을 보며 공부했다. 출처 https://joshua1988.github.io/web-development/http-part1/HTTP(Hypertext Transfer Protocol)는 웹을 개발하는 사람이..."
    } ,
  
    {
      "title"    : "HTML 시작 그리고 CSS",
      "title-lower"    : "html 시작 그리고 css",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "HTMLMARKUP언어CSS",
      "tags"     : "",
      "url"      : "/html/markup%EC%96%B8%EC%96%B4/css/2023/01/31/csr-ssr.html",
      "date"     : "2023-01-31 22:20:03 +0900",
      "content"     : "HTML 알지만, 정확히 알지는 않았던 것 이제 시작.서막의 알림이다.이제 이거부터 시작해서 완전한 초 보 프론트엔드가 되기위해 대단원의 시작을 알린다.일단 HTML하이퍼 텍스트 마크업 렝기쥐 라는 건 예전에 배워서 알고있었는데, HTML이 뭐야? 라고 그냥 누가 질문을 던진다면 흠…이럴거같은데쉽게 얘기해서 웹페이지 만들때 html쓰고, 자료들이 어떻..."
    } ,
  
    {
      "title"    : "CSR SSR",
      "title-lower"    : "csr ssr",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "CSRSSR",
      "tags"     : "",
      "url"      : "/csr/ssr/2023/01/25/html.html",
      "date"     : "2023-01-25 22:40:03 +0900",
      "content"     : "한번도 안들어보진 않았지만, 명확히 몰랐던 CSR, SSR오늘은 이것에 대해 오랜만에 포스팅을 하려고한다.CSR보다 먼저 SSR은 내가 처음에 알고있는 얕은 지식으로는 페이지가 렌더링 되기 맨~처음에딱 한번 데이터를 불러온다? 정도의 개념으로 알고 있었는데, 이번 계기를 통해서 제대로 알아보려한다.먼저… 맨날쓰는 렌더링이란 단어의 뜻부터 명확히 알고가..."
    } ,
  
    {
      "title"    : "정규표현식 regex",
      "title-lower"    : "정규표현식 regex",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "정규표현식regexregularExpression",
      "tags"     : "",
      "url"      : "/%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D/regex/regularexpression/2023/01/18/regular-expression.html",
      "date"     : "2023-01-18 22:00:03 +0900",
      "content"     : "정규표현식 aka regex에 대해 알아보자.코드작성을 할 때 간혹 보였었던 regex는 정규표현식의 줄임말이다.보통 이전에 form 안에서 이메일? 전화번호 같은 간단한거의 validate를 할 떄 잠깐 발을 담궜던 기억이 있는데,이제 이것에 대해 한번 제대로 알아보려 한다.  기본적으로 / / slash 안에 우리가 기본적으로 찾으려는 patter..."
    } ,
  
    {
      "title"    : "state와 lifecycle",
      "title-lower"    : "state와 lifecycle",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "reactstatelifecycle",
      "tags"     : "",
      "url"      : "/react/state/lifecycle/2023/01/18/state-lifecycle.html",
      "date"     : "2023-01-18 22:00:03 +0900",
      "content"     : "react 공식 문서를 보며 state lifecycle를 이해하다.공식문서를 보면 참 깔끔하게 나와있네 생각이 들면서도 말들이 참 어렵다는 생각이 든다.그래도 저번에 실제 업무에서 lifeCycle의 중요함을 듣고나서 한 번 정리를 해두면 좋겠다는 생각이 들어 한 개의 주제로 삼기로 했다.state 리엑트에서 component의 변경 가능한 데이터를..."
    } ,
  
    {
      "title"    : "동기 / 비동기의 늪",
      "title-lower"    : "동기 / 비동기의 늪",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "javascript동기비동기promiseasyncawait",
      "tags"     : "",
      "url"      : "/javascript/%EB%8F%99%EA%B8%B0/%EB%B9%84%EB%8F%99%EA%B8%B0/promise/async/await/2023/01/15/%EB%8F%99%EA%B8%B0%EB%B9%84%EB%8F%99%EA%B8%B0.html",
      "date"     : "2023-01-15 22:00:03 +0900",
      "content"     : "동기 / 비동기 알기왜 나만 이해를 못하는 것 같지싶을정도로 수많은 유튜브 강의와 글들이 있었는데 좀 기준이 잡히는 것 같아서 글을 남긴다.사실 동기 / 비동기가 뭔지는 바로 이해를 했었었다.동기 : 순차적으로 앞에 것 끝날 때까지 기다렸다 다음거 실행한다. 이렇다그래서 설계하기 쉽고 순차적으로 진행하는데, 앞에꺼 끝나고 그래야 다음 라운드를 진행하기..."
    } ,
  
    {
      "title"    : "some과 every",
      "title-lower"    : "some과 every",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "javascriptsomeevery",
      "tags"     : "",
      "url"      : "/javascript/some/every/2023/01/15/some%EA%B3%BC-every.html",
      "date"     : "2023-01-15 22:00:03 +0900",
      "content"     : "some과 every에 대해 알아보자굉장히 생소했지만, 오늘 일하는 도중 보게 된 some 때문에 궁금증이 생겨서 찾아봤고,이렇게 기록해두면 또 써먹을 일이 있을 것같아 포스팅한다. 내용이 길지는 않을 것 같다.참고로 둘다 배열에서 쓴다. 알아두자먼저every함수  every()는 배열의 각 엘리먼트에 대해서 테스트 함수의 반환 값이 모두 true인지..."
    } ,
  
    {
      "title"    : "useReducer에 대해 알아보자",
      "title-lower"    : "usereducer에 대해 알아보자",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "ReacthookuseReducer",
      "tags"     : "",
      "url"      : "/react/hook/usereducer/2023/01/15/useReducer.html",
      "date"     : "2023-01-15 22:00:03 +0900",
      "content"     : "useReducer 알아보기꽤나 많은 React Hook에 대해 알아봤는데, 통상 내가 useState 나 useEffect를 많이 사용했는데,오늘은 useReducer에 대해서 좀 깊게 파보려고 한다. 부디 어렵지 않았으면..여러개의 하위 값을 가지는 state를 다뤄야 할때 useReducer을 쓰면 효과적이다!아예 대놓고 공식문서에 useStat..."
    } ,
  
    {
      "title"    : "Spread Opertor",
      "title-lower"    : "spread opertor",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "javascriptES6SpreadOpertor",
      "tags"     : "",
      "url"      : "/javascript/es6/spread/opertor/2023/01/15/Spread-Opertor.html",
      "date"     : "2023-01-15 21:10:03 +0900",
      "content"     : "간략하게 Spread Opertor 알아보기스프레드 연산자를 사용하면 배열, 문자열, 객체 등 반복 가능한 객체 (Iterable Object)를 개별 요소로 분리할 수 있다.요새 자주 보이는 … 이런걸 스프레드 연산자라고 하는데,꽤나 자주 접하는 부분이라 이렇게 한 파트로 지정했다. 짧겠지만 유용한 글이 될거다.쭉 보니 예시를 통해 이해하는게 좋을 ..."
    } ,
  
    {
      "title"    : "10진수,2진수, reduce",
      "title-lower"    : "10진수,2진수, reduce",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "javascript10진수2진수reduceset",
      "tags"     : "",
      "url"      : "/javascript/10%EC%A7%84%EC%88%98/2%EC%A7%84%EC%88%98/reduce/set/2023/01/15/parseInt-%EC%A7%84%EC%88%98.html",
      "date"     : "2023-01-15 20:10:03 +0900",
      "content"     : "reduce, set과 진수변환에 대해 알아보려고 한다.일단 진수같은 경우는 보통 우리가 10진수를 사용해서,, 컴퓨터는 2진수를 사용한다!라는 말을듣는 것 외에는 실상 쓸일이 없는데, 코딩테스트를 접해보니.. 은근 10진수에서 2진수변환, 2진수에서 10진수 변환이런걸 접할일이 많은 것을 알고, 찾아본 다음 정리해본다.우선 먼저 이미 알고있었 던 1..."
    } ,
  
    {
      "title"    : "substring, slice 알아보기",
      "title-lower"    : "substring, slice 알아보기",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "javascriptsubstringslice",
      "tags"     : "",
      "url"      : "/javascript/substring/slice/2023/01/12/substring-slice.html",
      "date"     : "2023-01-12 22:10:03 +0900",
      "content"     : "Javascript에서 substring(), slice() 함수는 모두 문자열을 잘라주는 역할을 한다.substring에 대해 알아본다.오늘 코드테스트 예문을 푸는데 내가 했던 방식 말고 ,substring를 써서쉽게 답이 나왔던 코드가 있었는데, substring를 몰라 쏟아부은 시간이 꽤나있어서,substring를 기억하고서 다음에 써먹으면 유용..."
    } ,
  
    {
      "title"    : "split(), indexOf() 정확하게 알기",
      "title-lower"    : "split(), indexof() 정확하게 알기",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "javascriptsplitindexOf",
      "tags"     : "",
      "url"      : "/javascript/split/indexof/2023/01/11/javascript-split.html",
      "date"     : "2023-01-11 21:35:36 +0900",
      "content"     : "javascript 그 중에서도 split, indexOf 제대로 알기코딩테스트 연습을 쭉해오다 보니 꽤나 자주 사용되는 것 중 하나인 split, indexOfstring.split(separator, limit)split() 함수는 문자열을 ‘separator’로 잘라서, ‘limit’ 크기 이하의 배열에 잘라진 문자열을 저장하여 리턴한다.  se..."
    } ,
  
    {
      "title"    : "useRef",
      "title-lower"    : "useref",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "useRefreactHook",
      "tags"     : "",
      "url"      : "/useref/reacthook/2023/01/10/useRef.html",
      "date"     : "2023-01-10 22:45:36 +0900",
      "content"     : "useRef 배워보기//함수형 컴포넌트에서 useRef를 부르면 ref 오브젝트를 반환해준다.const ref = useRef(value)ref = { current:value } // ref는 이렇게 생겼다.반환된 Ref는 컴포넌트의 전 생애주기를 통해 유지가 된다.컴포넌트가 계속해서 렌더링이 되어도 언마운트되기 전까지는 값을 계속 유지한다.대표적 ..."
    } ,
  
    {
      "title"    : "useContext, context Api 배워보기",
      "title-lower"    : "usecontext, context api 배워보기",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "useContextcontextApi",
      "tags"     : "",
      "url"      : "/usecontext/contextapi/2023/01/09/useContext.html",
      "date"     : "2023-01-09 22:35:36 +0900",
      "content"     : "useContext 배워보기그간 reactHook을 꽤나 많이 써봤지만 useState, useEffect, useMemo, useCallback 외에useContext의 존재에 대해 알게 되었다. + context Api다른 것들을 유용하게 써왔으니, 이것에 대해도 알아보려고 한다.context는 앱 안에서 전역적으로 사용되는 데이터들을 여러 컴포넌..."
    } ,
  
    {
      "title"    : "React continue",
      "title-lower"    : "react continue",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "ReactJSXComponent",
      "tags"     : "",
      "url"      : "/react/jsx/component/2023/01/08/React-continue.html",
      "date"     : "2023-01-08 18:45:36 +0900",
      "content"     : "React 하던 것이어서..JSX 개념잡기태그가 비어있다면 XML처럼 /&amp;gt; 를 이용해 바로 닫아주어야 합니다.const element = &amp;lt;img src={user.avatarUrl} /&amp;gt;;매번 오류가 뜨는 부분이라 확인체크가 필수다.**기본적으로 React DOM은 JSX에 삽입된 모든 값을 렌더링하기 전에 이스..."
    } ,
  
    {
      "title"    : "this와 바인드",
      "title-lower"    : "this와 바인드",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "thisbind",
      "tags"     : "",
      "url"      : "/this/bind/2023/01/07/this-bind.html",
      "date"     : "2023-01-07 18:45:36 +0900",
      "content"     : "this와 바인드this는 함수를 호출한 객체이다.말이 겁나게 어렵다.,일단 함수외부에서, 전역적인 문맥에서 this를 접근하면 Window의 객체를 나타낸다.‘use strict’ 엄격 모드에서도 window의 객체가 나타난다.함수 내부에서의 thisfunction main () {    console.log(this) // window의 객체}//..."
    } ,
  
    {
      "title"    : "React useEffect와 변수 선언",
      "title-lower"    : "react useeffect와 변수 선언",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "ReactuseEffectvarletconst",
      "tags"     : "",
      "url"      : "/react/useeffect/var/let/const/2023/01/07/useEffect-var-let-const.html",
      "date"     : "2023-01-07 18:45:36 +0900",
      "content"     : "React useEffect &amp;amp; 변수선언용어 정리마운트 - 화면에 첫 렌더링 업데이트 - 다시 렌더링 언마운트 - 화면에서 사라짐 으로 이해하면 좋을 것 같다.** useEffect의 3가지 형태useEffect(()=&amp;gt;{    // 작업    })// 렌더링 될 때 마다 실행된다.useEffect(()=&amp;gt;{  ..."
    } ,
  
    {
      "title"    : "React 이어서 useMemo, useCallback",
      "title-lower"    : "react 이어서 usememo, usecallback",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "ReactuseMemouseCallback",
      "tags"     : "",
      "url"      : "/react/usememo/usecallback/2023/01/05/React-continue-usememo-usecallback.html",
      "date"     : "2023-01-05 21:55:36 +0900",
      "content"     : "몰랐던 useMemo, useCallback 그리고 React 이어서    useMemo먼저    이해한대로 쓰면 불필요하게 계속 반복적으로 쓰이는 낭비를 줄이기 위해 useMemo로 저장해놓고서    저장해놓은 데이터를 쓴다~ 이런 내용이다.        매번 렌더링이 왜이렇게 많이되나 했는데, //내가 맨날 보는function A(){    con..."
    } ,
  
    {
      "title"    : "React 시작",
      "title-lower"    : "react 시작",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "ReactJSXComponent",
      "tags"     : "",
      "url"      : "/react/jsx/component/2023/01/04/React-start.html",
      "date"     : "2023-01-04 20:55:36 +0900",
      "content"     : "React 문서보기 시작    React는 별도의 파일에 마크업과 로직을 넣어 기술을 인위적으로 분리하는 대신, 둘 다 포함하는 “컴포넌트”라고 부르는 느슨하게 연결된 유닛으로 관심사를 분리합니다    JSX의 중괄호 안에는 유효한 모든 JavaScript 표현식을 넣을 수 있습니다. 예를 들어 2 + 2, user.firstName 또는 format..."
    } ,
  
    {
      "title"    : "첫번째 포스팅",
      "title-lower"    : "첫번째 포스팅",
      "sub-titile" : "",
      "sub-titile-lower" : "",
      "categories" : "DiaryStartFirst",
      "tags"     : "",
      "url"      : "/diary/start/first/2023/01/03/getting-start-vue.html",
      "date"     : "2023-01-03 22:55:36 +0900",
      "content"     : "시작기대된다. 앞으로 채워나갈 나의 개발 포스팅들    일단 오늘은 Switch, case에 대해 써봤다.    아는 내용이지만, 써먹지 않으면 모르는거나 다름 없었다.    클린하게 코드를 쓰는게 중요하다는 걸 다시금 깨우침// 내가 짠 코드 const maxDate = reservationLimitType == &quot;DAY&quot; ? ad..."
    } 
  
]
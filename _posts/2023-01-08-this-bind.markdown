---
layout: post
title:  "this와 바인드"
date:   2023-01-07 18:45:36 +0900
categories: this bind
---
this와 바인드

## this는 함수를 호출한 객체이다.
말이 겁나게 어렵다.,

일단 함수외부에서, 전역적인 문맥에서 this를 접근하면 Window의 객체를 나타낸다.
'use strict' 엄격 모드에서도 window의 객체가 나타난다.

함수 내부에서의 this
```javascript
function main () {
    console.log(this) // window의 객체
}
//여기서 this는 어떻게 호출했느냐에 따라 달라진다.
//우선 우리가 저렇게 function을 써서 함수를 만들면 이건 window객체에 등록이 된다.
// 쉽게 window.main() 이라고 쓴거랑 같다고 보면된다.
```

이젠 다르게
```javascript
const object = {
    name: "홍길동",
    main: function(){
        console.log(this)
    }
    // 매서드는 객체의 속성으로 넣어진 함수를 의미한다.
}

object.main() // 이렇게 하면 값은 {name:"홍길동, main: f}
// 유용하게 쓰는 법은 이제 위에 console.log(this)에서 this.name 으로 홍길동을 뽑아낼 수 있다.
```
다른 쪽으로도 보자
```javascript
function main(){
    console.log(this)
}
const object = {
    name: "홍길동",
    main // main = main 이기 때문에 저렇게 써도 된다.
}
object.main()
// 함수가 외부에서 정의 되었어도 main함수를 호출한 객체가 object이므로 {name:"홍길동, main: f}이 뜬다.
```
객체 안의 객체
```javascript
function main(){
    console.log(this)
}
const object = {
    name: "홍길동",
    smallObject: {name: "홍홍홍", main}
}
object.smallObject.main()
// 이거는 {name: "홍홍홍", main: f}, 뜬다. 이해가 잘간다..ㅎㅎ
```

하지만 이런 this값을 일일히 추적하는건 굉장히 귀찮은 일이다.
이런 this값을 고정할 수 있다면 어떨까? 
## 그럴때 바로 bind를 이용한다. 
binding 객체를 묶어준다.

```javascript
function main(){
    console.log(this)
}// 원래 이렇게 전역으로 하면 window의 객체가 호출되지만, 밑에처럼 바인드를 하면 뭘해도 저게뜬다.
const mainBind = main.bind({name: "hi"})
mainBind() // 이러면 기존의 window객체가 아닌 {name: "hi"} 값이 뜬다.
```

## 주의할 점. 이미 바인드한 걸 또 바인드 할 수는 없다.
```javascript
function main(){
    console.log(this)
}
const mainBind = main.bind({name: "hi"})
mainBind() 
const mainBindBind = mainBind.bind({name: "hello"}) // 이렇게 해도 hi가 뜨지 hello가 적용되지 않는다.

// 또다른 예시

const object = {
    name: "홍길동",
    main: function (){
        console.log(this) // 원래는 홍길동,f 이게 뜨겠지만
    }.bind({name:"세종대왕"})
}
// 이렇게되면 세종대왕이 뜨게된다. 바인딩때문에
```

이벤트처리기에서 this
```javascript
<button id="btn"/>
const button = document.getElementById("btn")
button.addEventListener('click',function (){
    console.log(this) //  <button id="btn"/> 이 뜬다.
})
```
---
layout: post
title:  "동기 / 비동기의 늪"
date:   2023-01-15 22:00:03 +0900
categories: javascript 동기 비동기 promise async await 
---

동기 / 비동기 알기

## 왜 나만 이해를 못하는 것 같지

싶을정도로 수많은 유튜브 강의와 글들이 있었는데 좀 기준이 잡히는 것 같아서 글을 남긴다.

사실 동기 / 비동기가 뭔지는 바로 이해를 했었었다.

동기 : 순차적으로 앞에 것 끝날 때까지 기다렸다 다음거 실행한다. 이렇다
그래서 설계하기 쉽고 순차적으로 진행하는데, 앞에꺼 끝나고 그래야 다음 라운드를 진행하기때문에 시간이 오래걸린다.

비동기 : 순서 없어 그냥 한번에 다다닥.
시간을 아낄수있다. 좋다. 대표적인 비동기 setTimeOut 다 setTimeOut 함수로 설명하더라.
왜냐하면 setTimeOut에 지정한 밀리세컨이 끝날때 까지 기다렷다 다음꺼 할텐데 그런거없다. 그냥 다른거도 하고 setTimeOut값이 나와도 상관없더라.

흠. 그리고 내가 멍청해서인지 제일 이해가 안됫던,? 아니 잘못 해석해서 이해하고 있었던 부분에서 명쾌한 글을 찾아서 정리한다.

## 자바스크립트에서의 비동기를 동기로 동작시키는 대표적인 3가지의 방법
1. Callback Function
2. Promise
3. Async / Await
바로 이거다. 이게 동기인가 비동기인가 난 왜모르지 할 때 혜성처럼 등장한 
## 비동기를 동기로 동작시킨다. 
이 문구가 확 와닿았다..

먼저 callback함수는 이미 써놓은 글이 있으니, 그걸보면 되고

- Promise는 프로미스는 자바스크립트 비동기 처리에 사용되는 객체.
- 여기서 자바스크립트의 비동기 처리란 ‘특정 코드의 실행이 완료될 때까지 기다리지 않고 다음 코드를 먼저 수행하는 자바스크립트의 특성’을 의미

Promise는 다음 중 하나의 상태를 가집니다.

- 대기(pending): 이행하지도, 거부하지도 않은 초기 상태.
- 이행(fulfilled): 연산이 성공적으로 완료됨.
- 거부(rejected): 연산이 실패함.

```javascript
// 쉽게 이런식으로 쓰고,
let myFirstPromise = new Promise((resolve, reject) => {
    // 우리가 수행한 비동기 작업이 성공한 경우 resolve(...)를 호출하고, 실패한 경우 reject(...)를 호출합니다.
    // 이 예제에서는 setTimeout()을 사용해 비동기 코드를 흉내냅니다.
    // 실제로는 여기서 XHR이나 HTML5 API를 사용할 것입니다.
    setTimeout( function() {
        resolve("성공!")  // 와! 문제 없음!
    }, 250)
})

myFirstPromise.then((successMessage) => {
    // successMessage는 위에서 resolve(...) 호출에 제공한 값입니다.
    // 문자열이어야 하는 법은 없지만, 위에서 문자열을 줬으니 아마 문자열일 것입니다.
    console.log("와! " + successMessage)
});
// then을 써서 넘겨받은 데이터를 또 사용할 수 있다. 이런건 꽤 많이 본 케이스다 then

// 오류의 상황에선 catch를 써서 대응을 한다!
getData().then().catch();
// 이런 식으로 쓴다.

//전체적으로 다른 코드를 보자면
function heelo() {
    return new Promise(function(resolve, reject) {
        reject('failed');
    });
}

// 1. then()의 두 번째 인자로 에러를 처리하는 코드
heelo().then(function() {
    // ...
}, function(err) {
    console.log(err);
});

// 2. catch()로 에러를 처리하는 코드
heelo().then().catch(function(err) {
    console.log(err);
});
// 이런식으로 쓸 수 있다.
```
- Async / Await 말그대로 동작을 일시정지 시킨것처럼 보이게 해주고 Promise 나 Callback 보다는 직관적인 코드 패턴을 가질 수 있다.
- async 함수 내부에서는 promise 객체들의 순서를 await을 이용하여 순서 조절이 가능합니다.

```javascript
//좋은 예가 있어서 가져와봤다.

function promise(){
    console.log("히히히")
    return new promise(function (resolve, reject){
        setTimeout(()=>{resolve(10)}, 1000)
    })
}

async function hi(){
    console.log("1")
    const num = await promise()
    console.log("num", num)
}

hi() // 이러면 답이 뭐가나올까
// 먼저 1 찍히고 await가 있으니까 promise 객체로 가서 하하하 찍히고 1초있다가 resolve 10 
// 반환된다음 마지막으로 "num", 10 뙇
```

이렇게 쓰면된다!! 
뭐가 더 좋고 나쁘고는 없다고 한다. 다 알아두고 실전에서 써먹으면서 더 자연스러워지게 해야겠다. 

아 쓰다보니 깜빡한 한가지 promise.all([]), 배열이 들어간다.
2개의 작업이 있고, 한가지 작업은 1초가 걸리고 다른 한가지 작업은 2초가 걸릴 때, 우리가 원하는 것은 두개의 작업이 ‘모두’ 마무리 된 후에 다른 작업이 이루어지기를 바랄떄 쓸 수 있는데.

Promise.all 에 [첫번째 Promise, 두번째 Promise] 의 형태로 넘겨주면 모든 Promise의 작업이 끝난후 then 에 결과값을 배열형태로 넘겨준다! 써먹어보자 이거도


---
layout: post
title:  "모듈이란게 대체 무엇이냐"
date:   2023-05-06 18:35:03 +0900
categories: module 모듈 
---

코드를 짜다보면 모듈이라는 말을 참 많이 듣게되는데, 이것에 대해 명확히 몰랐기 떄문에
이번 포스팅을 통해 정확하게 다뤄보려고 한다.

개발하는 애플리케이션의 크기가 커지면 언젠간 파일을 여러 개로 분리해야 하는 시점이 온다.
## 이때 분리된 파일 각각을 '모듈(module)'이라고 부른다.
 * 모듈은 대개 클래스 하나 혹은 특정한 목적을 가진 복수의 함수로 구성된 라이브러리 하나로 구성된다.

### 스크립트의 크기가 점차 커지고 기능도 복잡해지자 자바스크립트 커뮤니티는 특별한 라이브러리를 만들어 필요한 모듈을 언제든지 불러올 수 있게 해준다거나 코드를 모듈 단위로 구성해 주는 방법을 만드는 등 다양한 시도를 하게 되는데,
 - 그 시도는 다음과 같은 모듈 시스템으로 이어진다.
  * AMD – 가장 오래된 모듈 시스템 중 하나로 require.js라는 라이브러리를 통해 처음 개발됨.
  * CommonJS – Node.js 서버를 위해 만들어진 모듈 시스템.
  * UMD – AMD와 CommonJS와 같은 다양한 모듈 시스템을 함께 사용하기 위해 만들어짐.

## 모듈이란?
"모듈은 단지 파일 하나에 불과합니다. 스크립트 하나는 모듈 하나입니다."
* export와 import를 적용하면 다른 모듈을 불러와 불러온 모듈에 있는 함수를 호출하는 것과 같은 기능 공유가 가능하다.

## 모듈의 핵심 기능
‘일반’ 스크립트와 모듈의 차이는 무엇일까요?

1. 엄격 모드로 실행됨
 - 모듈은 항상 엄격 모드(use strict)로 실행됩니다. 선언되지 않은 변수에 값을 할당하는 등의 코드는 에러를 발생시킴.
2. 모듈 레벨 스코프
 - 모듈은 자신만의 스코프가 있어, 모듈 내부에서 정의한 변수나 함수는 다른 스크립트에서 접근할 수 없다.
3. 단 한 번만 평가됨
 - 동일한 모듈이 여러 곳에서 사용되더라도 모듈은 최초 호출 시 단 한 번만 실행된다. 
 - 실행 후 결과는 이 모듈을 가져가려는 모든 모듈에 내보내 진다.

## import.meta
- import.meta 객체는 현재 모듈에 대한 정보를 제공해준다.
- 호스트 환경에 따라 제공하는 정보의 내용은 다른데, 브라우저 환경에선 스크립트의 URL 정보를 얻을 수 있다.
```javascript
<script type="module">
  alert(import.meta.url); // script URL (인라인 스크립트가 위치해 있는 html 페이지의 URL)
</script>
```


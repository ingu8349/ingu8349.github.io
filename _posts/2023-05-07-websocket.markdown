---
layout: post
title:  "WEB Socket에 대하여"
date:   2023-05-07 18:35:03 +0900
categories: 웹소켓 web socket 
---

오늘은 웹소켓에 대해 알아보려 한다.

간혹 ? 일을 하다 접하게 되면 네트워크, 통신 이런게 아직은 어렵기만 하지만,
웹소켓부분은 중요하다는 말을 많이 들어서 제대로 알아보려구 한다.

## 웹소켓(WebSocket)의 배경

- 인터넷이 나오고 HTTP를 통해서 서버로부터 데이터를 가져오기 위해서는 오로지 URL을 통한 요청이 유일한 방법이었다.
  ( 때문에 아이디 중복 확인과 같은 유효성 검사는 서버로 데이터를 보내는 중간과정에서 새로운 페이지 요청을 하게 되었다. )
- 여기서 발전된 방식이 Ajax통신으로 클라이언트에서 XMLHttpRequest 객체를 이용하여 서버에 요청을 보내면 서버가 응답을 하는 방식이다.
  ( 페이지 요청이 아닌 데이터 요청이라 부분적으로 정보를 갱신할 수 있게 된다. )
- 즉, 사용자의 이벤트로부터 Javascript는 사용자가 작성한 값이 쓰여진 DOM을 읽는다. => 그리고 XMLHttpRequest 객체를 통해 웹서버에 해당 값을 전송하고 웹서버는 요청을 처리하고 XML, Text, JSON 등을 이용하여 XMLHttpRequest 객체에 전송한다.

### 하지만, Ajax도 결국 HTTP를 이용하기 때문에 요청을 보내야 응답이 오는 문제가 있다.
### 이러한 문제들을 해결하기 위해 웹소켓이 탄생한다.

## 웹소켓은 HTTP와 같이 약속이라고 생각하면 쉽다.
- Transport protocol의 일종으로 서버와 클라이언트 간의 효율적인 양방향 통신을 실현하기 위한 구조이다.
- 웹소켓은 단순한 API로 구성되어있으며, 웹소켓을 이용하면 하나의 HTTP 접속으로 양방향 메시지를 자유롭게 주고받을 수 있다.
- 브라우저는 서버가 직접 보내는 데이터를 받아들일 수 있고, 사용자가 다른 웹사이트로 이동하지 않아도 최신 데이터가 적용된 웹을 볼 수 있게 해준다.

## 작동원리
- 서버와 클라이언트간의 웹소켓 연결을 HTTP프로토콜을 통해 이루어진다.
- 연결이 정상적으로 이루어진다면 서버와 클라이언트 간에 웹소켓 연결(TCP/IP기반)이 이루어지고 일정 시간이 지나면 HTTP연결은 자동으로 끊어진다.
- 소켓 API는 아주 간단한 기능들만을 제공하기 때문에 대부분의 경우 SockJS나 Socket.IO같은 오픈 소스 라이브러리를 많이 사용하고 있으며 메시지 포맷 또한 STOMP같은 프로토콜을 같이 이용한다고 한다.

### 그런데 이러한 웹소켓도 문제점은 존재한다고 한다.
1. 프로그램 구현에 보다 많은 복잡성을 초래한다.
- 웹 소켓은 HTTP와 달리 Stateful protocol이기 때문에 서버와 클라이언트 간의 연결을 항상 유지해야 하며 만약 비정상적으로 연결이 끊어졌을때 적절하게 대응해야 한다. 
- 이는 기존의 HTTP 사용시와 비교했을때 코딩의 복잡성을 가중시키는 요인이 될 수 있다.
2. 서버와 클라이언트 간의 Socket 연결을 유지하는 것 자체가 비용이 듭니다.
- 특히나 트래픽 양이 많은 서버같은 경우에는 CPU에 큰 부담이 될 수 있다.
3. 오래된 버전의 웹 브라우저에서는 지원하지 않는다. (물론 SockJS 라이브러리 같은 경우에는 Fallback option을 제공하고 있다.)

출처 https://choseongho93.tistory.com/266
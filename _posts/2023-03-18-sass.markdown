---
layout: post
title:  "HTML SASS"
date:   2023-03-18 18:35:03 +0900
categories: HTML CSS SASS 
---

HTML SASS에 관하여

## CSS라는 언어는 매우 원시적인 언어이며 그 수가 늘어날수록 관리도 수정도 어려울 수있다.

Sass는 CSS를 조금 더 프로그래밍 언어스럽게 작성할 수 있는 문법들을 제공한다.

### sass는 확장자를 .sass로 만든다.

### SASS 문법 1 : 값을 저장해놓고 쓰는 '변수'

자바스크립트 변수처럼 사용한다고 생각하면 쉽게 이해할 수 있다.

```javascript
$메인색상 : #2a4c6e;
$서브색상 : #333333;

.text {
  color: $메인색상
}
.box {
  background: $서브색상
} 
```
이렇게 쓸 수도 있고, 

```javascript
$기본사이즈 : 16px;

.box {
  font-size : $기본사이즈 + 2px;
  width : (100px * 2);
  height : (300px / 3)
}
```
사칙연산도 가능하다.

### Sass 문법 2. 셀렉터 대신 쓰는 Nesting

셀렉터를 많이 사용하다보면 코드 자체가 복잡해진다.
예) div.container > div p.first > span::after
예시처럼 줄이 길어지면 읽기도 불편하고 수정도 어렵다.

```javascript
.navbar {
  ul {
    width : 100%;
  }
  li {
    color : black;
  }
}
/*위에건 SASS 문법*/

.navbar ul { 
  width : 100%; 
}
.navbar li { 
  color : black; 
}
/*밑에건 CSS 문법*/
```
이런식으로 sass문법을 통해 쓰면 훨씬 보기 편하고 수정도 용이하다.
또한 hover , after 같은 것도
```javascript
.navbar {
&:hover {
        color : blue;
    }
}
```
위에 처럼 쓸 수 있는데, &가 없다면 스페이스바 공란이 생겨 &를 붙여주어야 한다.

### Sass 문법 3. 이미 있는 클래스를 확장하는 @extend 

```javascript
.btn {
  font-size : 16px;
  padding : 10px;
  background : grey;
}

.btn-green {
  @extend .btn;
  background : green;
}
```
@extend를 사용하신 후 복붙할 클래스명을 뒤에 적으면 클래스명에 있던 모든 내용이 복붙되는데 예시를 보면 이해가 쉽다. 

### Sass 문법 4. 코드를 한단어로 축약하는 @mixin

변수는 짧은 값 하나만 저장해서 쓸 수 있는 문법이었는데 @mixin은 스타일 여러줄을 한 단어로 치환해서 사용가능하다.

```javascript
@mixin 버튼기본디자인() {
  font-size : 16px;
  padding : 10px;
}

.btn-green {
  @include 버튼기본디자인();
  background : green;
}
```
사실 extend와 사용법은 거의 똑같다고 보면되는데 큰 차이하나는 바로 변수를 넣을 수 있다는 점이다.

```javascript
@mixin 버튼기본디자인($구멍) {
  font-size : 16px;
  padding : 10px;
  background : $구멍;
}
```
이런식으로 자바스크립트 변수 처럼 변수를 넣어쓸수있다. 이해가 쉽다.
